/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.rain.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.rain.service.model.Doctor;
import com.liferay.rain.service.model.DoctorModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Doctor service. Represents a row in the &quot;Rain_Doctor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DoctorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DoctorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DoctorImpl
 * @generated
 */
@JSON(strict = true)
public class DoctorModelImpl
	extends BaseModelImpl<Doctor> implements DoctorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doctor model instance should use the <code>Doctor</code> interface instead.
	 */
	public static final String TABLE_NAME = "Rain_Doctor";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"surname", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"govtId", Types.VARCHAR},
		{"nationality", Types.VARCHAR}, {"payGroup", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"contactNumber", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("surname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govtId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Rain_Doctor (employeeId LONG not null primary key,groupId LONG,surname VARCHAR(75) null,firstName VARCHAR(75) null,department VARCHAR(75) null,govtId VARCHAR(75) null,nationality VARCHAR(75) null,payGroup VARCHAR(75) null,email VARCHAR(75) null,contactNumber VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Rain_Doctor";

	public static final String ORDER_BY_JPQL = " ORDER BY doctor.surname ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Rain_Doctor.surname ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEPARTMENT_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GOVTID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALITY_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PAYGROUP_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SURNAME_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DoctorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Doctor.class;
	}

	@Override
	public String getModelClassName() {
		return Doctor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Doctor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Doctor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Doctor, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Doctor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Doctor, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Doctor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Doctor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Doctor, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Doctor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Doctor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Doctor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Doctor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Doctor, Object>>();
		Map<String, BiConsumer<Doctor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Doctor, ?>>();

		attributeGetterFunctions.put("employeeId", Doctor::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId", (BiConsumer<Doctor, Long>)Doctor::setEmployeeId);
		attributeGetterFunctions.put("groupId", Doctor::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Doctor, Long>)Doctor::setGroupId);
		attributeGetterFunctions.put("surname", Doctor::getSurname);
		attributeSetterBiConsumers.put(
			"surname", (BiConsumer<Doctor, String>)Doctor::setSurname);
		attributeGetterFunctions.put("firstName", Doctor::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Doctor, String>)Doctor::setFirstName);
		attributeGetterFunctions.put("department", Doctor::getDepartment);
		attributeSetterBiConsumers.put(
			"department", (BiConsumer<Doctor, String>)Doctor::setDepartment);
		attributeGetterFunctions.put("govtId", Doctor::getGovtId);
		attributeSetterBiConsumers.put(
			"govtId", (BiConsumer<Doctor, String>)Doctor::setGovtId);
		attributeGetterFunctions.put("nationality", Doctor::getNationality);
		attributeSetterBiConsumers.put(
			"nationality", (BiConsumer<Doctor, String>)Doctor::setNationality);
		attributeGetterFunctions.put("payGroup", Doctor::getPayGroup);
		attributeSetterBiConsumers.put(
			"payGroup", (BiConsumer<Doctor, String>)Doctor::setPayGroup);
		attributeGetterFunctions.put("email", Doctor::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Doctor, String>)Doctor::setEmail);
		attributeGetterFunctions.put("contactNumber", Doctor::getContactNumber);
		attributeSetterBiConsumers.put(
			"contactNumber",
			(BiConsumer<Doctor, String>)Doctor::setContactNumber);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public String getSurname() {
		if (_surname == null) {
			return "";
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surname = surname;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSurname() {
		return getColumnOriginalValue("surname");
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDepartment() {
		return getColumnOriginalValue("department");
	}

	@JSON
	@Override
	public String getGovtId() {
		if (_govtId == null) {
			return "";
		}
		else {
			return _govtId;
		}
	}

	@Override
	public void setGovtId(String govtId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_govtId = govtId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalGovtId() {
		return getColumnOriginalValue("govtId");
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationality = nationality;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationality() {
		return getColumnOriginalValue("nationality");
	}

	@JSON
	@Override
	public String getPayGroup() {
		if (_payGroup == null) {
			return "";
		}
		else {
			return _payGroup;
		}
	}

	@Override
	public void setPayGroup(String payGroup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payGroup = payGroup;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPayGroup() {
		return getColumnOriginalValue("payGroup");
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalContactNumber() {
		return getColumnOriginalValue("contactNumber");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Doctor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Doctor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Doctor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DoctorImpl doctorImpl = new DoctorImpl();

		doctorImpl.setEmployeeId(getEmployeeId());
		doctorImpl.setGroupId(getGroupId());
		doctorImpl.setSurname(getSurname());
		doctorImpl.setFirstName(getFirstName());
		doctorImpl.setDepartment(getDepartment());
		doctorImpl.setGovtId(getGovtId());
		doctorImpl.setNationality(getNationality());
		doctorImpl.setPayGroup(getPayGroup());
		doctorImpl.setEmail(getEmail());
		doctorImpl.setContactNumber(getContactNumber());

		doctorImpl.resetOriginalValues();

		return doctorImpl;
	}

	@Override
	public Doctor cloneWithOriginalValues() {
		DoctorImpl doctorImpl = new DoctorImpl();

		doctorImpl.setEmployeeId(
			this.<Long>getColumnOriginalValue("employeeId"));
		doctorImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		doctorImpl.setSurname(this.<String>getColumnOriginalValue("surname"));
		doctorImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		doctorImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		doctorImpl.setGovtId(this.<String>getColumnOriginalValue("govtId"));
		doctorImpl.setNationality(
			this.<String>getColumnOriginalValue("nationality"));
		doctorImpl.setPayGroup(this.<String>getColumnOriginalValue("payGroup"));
		doctorImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		doctorImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));

		return doctorImpl;
	}

	@Override
	public int compareTo(Doctor doctor) {
		int value = 0;

		value = getSurname().compareTo(doctor.getSurname());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Doctor)) {
			return false;
		}

		Doctor doctor = (Doctor)object;

		long primaryKey = doctor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Doctor> toCacheModel() {
		DoctorCacheModel doctorCacheModel = new DoctorCacheModel();

		doctorCacheModel.employeeId = getEmployeeId();

		doctorCacheModel.groupId = getGroupId();

		doctorCacheModel.surname = getSurname();

		String surname = doctorCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			doctorCacheModel.surname = null;
		}

		doctorCacheModel.firstName = getFirstName();

		String firstName = doctorCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			doctorCacheModel.firstName = null;
		}

		doctorCacheModel.department = getDepartment();

		String department = doctorCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			doctorCacheModel.department = null;
		}

		doctorCacheModel.govtId = getGovtId();

		String govtId = doctorCacheModel.govtId;

		if ((govtId != null) && (govtId.length() == 0)) {
			doctorCacheModel.govtId = null;
		}

		doctorCacheModel.nationality = getNationality();

		String nationality = doctorCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			doctorCacheModel.nationality = null;
		}

		doctorCacheModel.payGroup = getPayGroup();

		String payGroup = doctorCacheModel.payGroup;

		if ((payGroup != null) && (payGroup.length() == 0)) {
			doctorCacheModel.payGroup = null;
		}

		doctorCacheModel.email = getEmail();

		String email = doctorCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			doctorCacheModel.email = null;
		}

		doctorCacheModel.contactNumber = getContactNumber();

		String contactNumber = doctorCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			doctorCacheModel.contactNumber = null;
		}

		return doctorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Doctor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Doctor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Doctor, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Doctor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Doctor>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Doctor.class, ModelWrapper.class);

	}

	private long _employeeId;
	private long _groupId;
	private String _surname;
	private String _firstName;
	private String _department;
	private String _govtId;
	private String _nationality;
	private String _payGroup;
	private String _email;
	private String _contactNumber;

	public <T> T getColumnValue(String columnName) {
		Function<Doctor, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Doctor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("surname", _surname);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("govtId", _govtId);
		_columnOriginalValues.put("nationality", _nationality);
		_columnOriginalValues.put("payGroup", _payGroup);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("contactNumber", _contactNumber);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("surname", 4L);

		columnBitmasks.put("firstName", 8L);

		columnBitmasks.put("department", 16L);

		columnBitmasks.put("govtId", 32L);

		columnBitmasks.put("nationality", 64L);

		columnBitmasks.put("payGroup", 128L);

		columnBitmasks.put("email", 256L);

		columnBitmasks.put("contactNumber", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Doctor _escapedModel;

}